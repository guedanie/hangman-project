# Hangman Game

## Objective:

The objective of the code is to help develop base python skills, but using varibles, lists, functions, etc, and putting them together to create something new. 

The game is to be played from the terminal. For the game to work, it requires a csv file to be present, as it will pull a list of words from that file. Instructions on how to get the file are below:

`words = pd.read_csv('https://query.data.world/s/mfp7lfkxfott7zp2sgr3nlfv4v5bpp', encoding= "iso-8859-1")`
    `words.to_csv("word-meaning-examples.csv")`

This will download the data from data.world, and create a new csv file to be stored in the same directory as the code. Once the file is present, the game will randomly select a word from the file. The index for this word will be stored in a function, which can then be used to pull all the relevant data. Becasue the function to pull the index exists within the main loop, the index will reset every time the player wants to play again. 

The game works by asking the user for a series of inputs. The first input will ask to chose a level. The game pulls a list of over 10,000 words, so to make it easier, player can choose the following options: 

Easy mode = words with up to 4 letters
Medium mode = words with between 5 to 8 letters
Hard mode = words with more than 8 letters. 

After that, the game will continue to ask for letters. A function has been create to take every letter inputted, and compare it to a list of letters for the selected word. If it matches, then it pulls the index of that letter in the "word". The function then adds that letter to a new list, in the correct index, to simulate the hangman game where letters are written over dashes. The same function also stores all guessed letters, and prints them periodically so the user is aware of what letters have already been tried. 

The game ends when either the word is completed (meaning there are no empty dashes) or if the player cannot guess the word in 6 tries. Correct letters don't count as tries, and clues are given to the player after 1 failed try, and 5 failed tries. 

## Further improvements:

Further improvements will be do create a more visual representation, but creating stickfigures and storing them in variables which can then be called when a wrong input is added, creating a more visual game.

Even further, the objective is to eventually be able to create a GUI, potentially using pygame, to improve the experience. 

# Pygame Version

To further practice my Python skills, I challenge myself to learn Pygame, and to create a GUI version of the hangman game. Given the complexity of Pygame, the game has become a little simpler, but the objective was to create a functonal game with a GUI that a regular user (not familar with the terminal) could use. The project turned out to be a really good introduction point for Pygame, as it didn't require animations or too many images. 

Although I did lots of research online to get more familiar with the program, large part of my code for the pygame version is inspired by Tim from "Tech with Tim" (link to his Github below). Most of the code is my own, but there were ideas and code from Tim's version that were particularly helpful. Images were also from his repo.

Link to Github: https://github.com/techwithtim/Hangman

## Instructions

To play this game, you need to install pygame. Here is a link to a youtube video (from Tech with Tim) on how to do it for macs: https://www.youtube.com/watch?v=E-WhAS6qzsU

You will also need to download all the images in the repo, as well as the document called: "word-meaning-examples.csv". This is where the random words will be pulled from. 

I hope you enjoy the game!
